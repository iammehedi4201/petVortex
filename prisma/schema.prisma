generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//* ---------------Enums----------------- *//

//! Status Enum
enum Status {
  PENDING
  APPROVED
  REJECTED
}

//! gender Enum
enum Gender {
  MALE
  FEMALE
}

//! UserRoles Enum
enum UserRole {
  ADMIN
  USER
}

//! Status Enum
enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

//! HealthStatus Enum
enum HealthStatus {
  VACCINATED
  SPAYED
  NEUTERED
}

//* ---------------Models----------------- *//

//! User Model
model User {
  id              String            @id @default(uuid())
  name            String
  contactNo       String
  userName        String            @unique
  email           String            @unique
  password        String
  role            UserRole          @default(USER)
  status          UserStatus        @default(ACTIVE)
  profilePicture  String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  AdoptionRequest AdoptionRequest[]
  PasswordHistory PasswordHistory[]

  @@map("users")
}

//! Pet Model
model Pet {
  id                   String            @id @default(uuid())
  name                 String
  species              String
  breed                String
  age                  Int
  size                 String
  gender               Gender
  location             String
  description          String
  temperament          String
  healthStatus         HealthStatus
  speacialNeeds        String
  medicalHistory       String
  adoptionRequirements String
  isDeleted            Boolean           @default(false)
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  AdoptionRequest      AdoptionRequest[]
  PetImages            PetImages[]
}

//! Adoption Request Model
model AdoptionRequest {
  id        String   @id @default(uuid())
  userId    String
  petId     String
  status    Status   @default(PENDING)
  address   String
  city      String
  state     String
  zipCode   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  pet  Pet  @relation(fields: [petId], references: [id])

  @@map("adoption_requests")
}

//! Password History Model

model PasswordHistory {
  id        String   @id @default(uuid())
  userId    String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("password_history")
}

//! Photo Model 
model PetImages {
  id        String   @id @default(uuid())
  url       String
  petId     String
  pet       Pet      @relation(fields: [petId], references: [id])
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("pet_images")
}
